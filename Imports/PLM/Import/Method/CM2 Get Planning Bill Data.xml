<AML>
 <Item type="Method" id="A23B5EFFE72B4639863D9AC5133A41ED" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[    var inn = this.getInnovator();
    var selected_date = this.getProperty("selected_date","");
    var item_number = this.getProperty("item_number","");
    
    if (selected_date == "" || item_number == "")
        return inn.newError("The 'selected_date' and 'item_number' properties cannot be null.");
    
    Item result = GetStructure(inn, selected_date, item_number, 1);
    
    result = BuildResult(inn, selected_date, item_number, result);
    
    return result;
}

public static Item GetStructure(Innovator inn, string selected_date, string item_number, int level)
{
    
    /**** get the as-released item - calculation step 1 ***********************/
    
    Item as_released = GetReleased(inn, selected_date, item_number);
    
    // we'll use this in the XSLT for the report
    as_released.setAttribute("cm2","as-released");
        
        
    /**** get the as-planned item(s) - calculation step 2 *********************/
    
    // get the generation of the as-released part
    string as_released_gen;
    string as_released_rev;
    if (as_released.isError())
    {
        // no released part matches this criteria
        as_released = null;
        as_released_gen = "0";
        as_released_rev = "";
    } 
    else
    {
        as_released_gen = as_released.getProperty("generation","");
        as_released_rev = as_released.getProperty("major_rev","");
    }
    
    Item as_planned = GetPlanned(inn, selected_date, item_number, as_released_gen, as_released_rev);
    
    if (as_planned.isError())
        return as_released;
    
    
    /**** get the relationships for the as-planned and as-released items ******/
    
    Item released_structure = as_released;
    Item planned_structure = as_planned;
    
    if (as_planned.getItemCount() > 1)
        planned_structure = as_planned.getItemByIndex(0);
        
    int planned_revisions = planned_structure.getItemCount();
    string planned_id = planned_structure.getID(); // id of latest generation
    
    // for each bom in the released structure, see if there is a corresponding bom 
    // in the planned structure with the same quantity and item number
    Item rel_boms = released_structure.getItemsByXPath("./Relationships/Item[@type='Part BOM']");
    Item plan_boms = planned_structure.getItemsByXPath("./Relationships/Item[@type='Part BOM' and source_id='" + planned_id + "']");
    
    if (rel_boms.isEmpty() || plan_boms.isEmpty())
        return released_structure;
    
    // check released relationships
    for (int i=0; i < rel_boms.getItemCount(); i++)
    {
        Item rel_bom = rel_boms.getItemByIndex(i);
        Item rel_part = rel_bom.getItemsByXPath("./related_id/Item[@type='Part']");
        
        Item plan_bom = plan_boms.getItemsByXPath("//Item[source_id='" + planned_id + "' and quantity='" + rel_bom.getProperty("quantity","") + "' and related_id/Item/item_number='" + rel_part.getProperty("item_number","") + "']");
        
        // if plan_bom is defined, this relationship is unchanged
        // if the plan_bom is undefined, we know rel_bom is deleted
        if (plan_bom.getItemCount() < 1 || plan_bom.isError() || plan_bom.isEmpty())
        {
            rel_bom.setProperty("a_d","D");
            rel_bom.setAttribute("is_planned","true");
            
            // get first parent gen that doesn't have this part - use for effective date and rev
            Item first_parent = GetFirstParent(inn,rel_part.getProperty("item_number",""),item_number,rel_bom.getProperty("quantity",""),"delete");
            
            if (!first_parent.isError())
            {
                rel_bom.setProperty("first_parent_rev",first_parent.getProperty("major_rev","x"));
                rel_bom.setProperty("first_parent_eff",first_parent.getProperty("effective_date",""));
                
                Item cn = first_parent.getPropertyItem("cn");
                if (cn != null)
                    rel_bom.setProperty("first_parent_cn",cn.getProperty("keyed_name","no name"));
            }
            
            // see if there is a corresponding add row for this delete row
            // if so, overwrite the effective date/cn properties on the delete row with the values from the add row
            Item add_row = plan_boms.getItemsByXPath("//Item[@type='Part BOM' and sort_order='" + rel_bom.getProperty("sort_order","") + "' and related_id/Item/item_number!='" + rel_part.getProperty("item_number","") + "']");
            if (add_row.getItemCount() == 1)
            {
                Item add_item = add_row.getRelatedItem();
                first_parent = GetFirstParent(inn,add_item.getProperty("item_number",""),item_number,add_row.getProperty("quantity",""),"add");
                if (!first_parent.isError())
                {
                    rel_bom.setProperty("first_parent_rev",first_parent.getProperty("major_rev","x"));
                    rel_bom.setProperty("first_parent_eff",first_parent.getProperty("effective_date","x"));
                    
                    Item cn = first_parent.getPropertyItem("cn");
                    if (cn != null)
                        rel_bom.setProperty("first_parent_cn",cn.getProperty("keyed_name","no name"));
                }
            }
            
        }
    }
    
    // check planned relationships to see if there are any that are added
    for (int i=0; i < plan_boms.getItemCount(); i++)
    {
        Item plan_bom = plan_boms.getItemByIndex(i);
        Item plan_part = plan_bom.getItemsByXPath("./related_id/Item[@type='Part']");
        
        Item rel_bom = rel_boms.getItemsByXPath("//Item[quantity='" + plan_bom.getProperty("quantity","") + "' and related_id/Item/item_number='" + plan_part.getProperty("item_number","") + "']");
        
        // if rel_bom is defined, this relationship is unchanged
        // if the rel_bom is undefined, we know plan_bom is added so we need to add it to the structure
        if (rel_bom.getItemCount() < 1)
        {
            plan_bom.setProperty("a_d","A");
            plan_bom.setAttribute("is_planned","true");
            
            // get first parent gen that has this part - use for effective date and rev
            Item first_parent = GetFirstParent(inn,plan_part.getProperty("item_number",""),item_number,plan_bom.getProperty("quantity",""),"add");
            
            if (!first_parent.isError())
            {
                plan_bom.setProperty("first_parent_rev",first_parent.getProperty("major_rev","x"));
                plan_bom.setProperty("first_parent_eff",first_parent.getProperty("effective_date",""));
                
                Item cn = first_parent.getPropertyItem("cn");
                if (cn != null)
                    plan_bom.setProperty("first_parent_cn",cn.getProperty("keyed_name","no name"));
            }
            
            released_structure.addRelationship(plan_bom);
        }
    }

    
    /**** return the results to be processed by xslt **************************/
    return released_structure;
    
}

public static Item GetReleased(Innovator inn, string selected_date, string item_number)
{
    string part_select = "id,config_id,item_number,generation,classification,effective_date,release_date,release_date_plan,is_released,major_rev"; 
    
    Item as_released = inn.newItem("Part","get");
    as_released.setAttribute("select",part_select);
    
    // set properties for query
    as_released.setProperty("is_released","1");
    as_released.setProperty("effective_date",selected_date);
    as_released.setPropertyAttribute("effective_date","condition","le");
    as_released.setProperty("item_number",item_number);
    
    // make sure we don't just get the current version
    as_released.setProperty("generation","0");
    as_released.setPropertyAttribute("generation","condition","ne");
    
    // get only the item with the greatest generation
    as_released.setAttribute("orderBy","generation DESC");
    as_released.setAttribute("pagesize","1");
    as_released.setAttribute("page","1");
    
    as_released.createRelationship("Part BOM","");
    
    as_released = as_released.apply();
    
    return as_released;
}

public static Item GetPlanned(Innovator inn, string selected_date, string item_number, string as_released_gen, string as_released_rev)
{
    string part_select = "id,config_id,item_number,generation,major_rev,classification,effective_date,release_date,release_date_plan,is_released"; 
    
    Item as_planned = inn.newItem("Part","get");
    as_planned.setAttribute("select",part_select);
    as_planned.setAttribute("orderBy","generation DESC");
    as_planned.setProperty("item_number",item_number);
    
    // set date properties for query
    Item or_dates = as_planned.newOR();
    or_dates.setProperty("effective_date",selected_date);
    or_dates.setPropertyAttribute("effective_date","condition","ge");
    or_dates.setProperty("release_date",selected_date);
    or_dates.setPropertyAttribute("release_date","condition","ge");
    or_dates.setProperty("release_date_plan",selected_date);
    or_dates.setPropertyAttribute("release_date_plan","condition","ge");
    
    // make sure we get generations greater than the as_released_gen
    as_planned.setProperty("generation",as_released_gen);
    as_planned.setPropertyAttribute("generation","condition","gt");
    
    // we will limit results to the next greatest major rev
    var next_rev = NextRev(as_released_rev);
    as_planned.setProperty("major_rev",next_rev);
    
    as_planned.createRelationship("Part BOM","");
    
    as_planned = as_planned.apply();
    
    return as_planned;
}

public static string NextRev(string letter)
{
    // only works for default revisioning sequence
    // first case - string is empty: return "A"
    if ((letter == null) || (letter.Length == 0))
        return "A";
	
	// next case - last char is less than 'z': simply increment last char
    char lastChar = letter[letter.Length - 1];
    string fragment = letter.Substring(0, letter.Length - 1);

    if (lastChar < 'Z')
    {
        ++lastChar;
        return fragment + lastChar;
    }

    // next case - last char is 'Z': roll over and increment preceding string
    return NextRev(fragment) + 'A';
}

public static Item GetRelationships(Innovator inn, string item_id)
{
    string qd_id = "223AF4086BFA4AA19472DE89DE47D485";

    // get query definition with relationships
    Item queryDef = inn.newItem("qry_QueryDefinition","get");
    queryDef.setID(qd_id);
    queryDef.setAttribute("levels","2");
    queryDef = queryDef.apply();
    
    string offset = "0";
    string fetch = "100";
    string offset_fetch = "<configuration><option><offset>" + offset + 
                            "</offset><fetch>" + fetch + 
                            "</fetch></option></configuration>";
                            
    // add CDATA element to query                    
    XmlNode rootItem = queryDef.dom.SelectSingleNode("//Item[@type='qry_QueryDefinition']/Relationships/Item[1]");
    XmlCDataSection cdata = queryDef.dom.CreateCDataSection(offset_fetch);
    XmlElement newNode = queryDef.dom.CreateElement("offset_fetch_xml");
    newNode.AppendChild(cdata);
    rootItem.AppendChild(newNode);
    
    // pass id as a parameter
    XmlNode paramItem = queryDef.dom.SelectSingleNode("//Item[@type='qry_QueryParameter']/value");
    paramItem.InnerText = item_id;
    
    // execute query
    queryDef.setAction("qry_ExecuteQueryDefinition");
    queryDef.setAttribute("levels","0");
    queryDef = queryDef.apply();
    
    return queryDef;
}

// this method returns the first generation that includes an added part, or the first generation that does not include a deleted part
public static Item GetFirstParent(Innovator inn, string child_num, string parent_num, string qty, string change_type)
{
    Item parent = inn.newItem("Part","get");
    parent.setAttribute("orderBy","generation ASC");
    parent.setProperty("item_number",parent_num);
    parent.setProperty("generation","0");
    parent.setPropertyAttribute("generation","condition","ge");
    
    Item rel = parent.createRelationship("Part BOM","get");
    rel.setProperty("quantity",qty);
    
    Item child = rel.createRelatedItem("Part","get");
    child.setProperty("item_number",child_num);
    
    parent = parent.apply();
    
    // get the first generation of the parent that includes the child part
    if (change_type == "add")
    {
        return parent.getItemByIndex(0);
    }
    
    // get last parent to include deleted item
    if (change_type == "delete")
    {
        return parent.getItemByIndex(parent.getItemCount()-1);
    }
    
    return inn.newError("GetFirstParent: bad parameter");
}

public static Item BuildResult(Innovator inn, string selected_date, string item_number, Item structure)
{
    Item result = inn.newItem("Report Options");
    result.setProperty("item_number",item_number);
    result.setProperty("selected_date",selected_date);
    
    result.appendItem(structure);
        
    return result;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
]]></method_code>
  <method_type>C#</method_type>
  <name>CM2 Get Planning Bill Data</name>
 </Item>
</AML>