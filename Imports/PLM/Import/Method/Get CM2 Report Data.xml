<AML>
 <Item type="Method" id="3E32327AE87B4F67BF58D0207F693B65" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[    var inn = this.getInnovator();
    var selected_date = this.getProperty("selected_date","");
    var item_number = this.getProperty("item_number","");
    
    if (selected_date == "" || item_number == "")
        return inn.newError("The 'selected_date' and 'item_number' properties cannot be null.");
    
    Item result = GetStructure(inn, selected_date, item_number, 1);
    
    // check if this item has a parent part with classification = Application Requirements
    string result_id = result.getProperty("id","");
    Item parent = GetParent(inn,result_id);
    
    // if parent part exists, append it as a pseudo-relationship
    if (!parent.isError())
    {
        Item pseudo = result.createRelationship("Parent Part","get");
        pseudo.setRelatedItem(parent);
        result.setAttribute("has_parent",parent.getID());
    }
    
    result = BuildResult(inn, selected_date, item_number, result);
        
    return result;
}

public static Item GetStructure(Innovator inn, string selected_date, string item_number, int level)
{
    
    /**** get the as-released item - calculation step 1 ***********************/
    
    Item as_released = GetReleased(inn, selected_date, item_number);
    
    // we'll use this in the XSLT for the report
    as_released.setAttribute("cm2","as-released");
        
        
    /**** get the as-planned item(s) - calculation step 2 *********************/
    
    // get the generation of the as-released part
    string as_released_gen;
    string as_released_rev;
    if (as_released.isError())
    {
        // no released part matches this criteria
        as_released = null;
        as_released_gen = "0";
        as_released_rev = "";
    } 
    else
    {
        as_released_gen = as_released.getProperty("generation","");
        as_released_rev = as_released.getProperty("major_rev","");
    }
    
    Item as_planned = GetPlanned(inn, selected_date, item_number, as_released_gen, as_released_rev);
    
    
    /**** get the relationships for the as-planned and as-released items ******/
    
    Item released_structure = GetRelationships(inn, as_released.getID(), selected_date);
    
    SetHierarchy(released_structure,level);
    
    // may be more than one planned - need to update later
    Item result = released_structure;
    if (!as_planned.isError())
    {
        // add planned properties to released_structure (we use this for the rightmost columns)
        result.setProperty("a_d","D");
        result.setProperty("planned_effective_date",as_planned.getProperty("effective_date",""));
        
        Item cn = as_planned.getItemsByXPath("./cn/Item");
        if (!cn.isError())
            result.setProperty("planned_cn",cn.getProperty("keyed_name","no name"));
        
        // add planned rev as a relationship
        Item planned_rel = result.createRelationship("Planned","get");
        planned_rel.setProperty("a_d","A");
        planned_rel.setRelatedItem(as_planned);
    }
    
    // build out each child BOM
    Item boms = released_structure.getItemsByXPath("./Relationships/Item[@type='Part BOM']");
    if (!boms.isEmpty())
    {
        for (int i=0; i < boms.getItemCount(); i++)
        {
            Item bom = boms.getItemByIndex(i);
            Item part = bom.getItemsByXPath("./related_id/Item");
            Item this_part = GetStructure(inn, selected_date, part.getProperty("item_number",""), level+1);
            
            // if successful, we remove the related item and replace with this_part
            if (!this_part.isError())
                bom.setRelatedItem(this_part);
        }
    }
    
    
    /**** return the results to be processed by xslt **************************/
    return released_structure;
    
}

public static Item GetReleased(Innovator inn, string selected_date, string item_number)
{
    string part_select = "id,config_id,item_number,generation,classification,effective_date,release_date,release_date_plan,is_released,major_rev"; 
    
    Item as_released = inn.newItem("Part","get");
    as_released.setAttribute("select",part_select);
    
    // set properties for query
    as_released.setProperty("is_released","1");
    as_released.setProperty("effective_date",selected_date);
    as_released.setPropertyAttribute("effective_date","condition","le");
    as_released.setProperty("item_number",item_number);
    
    // make sure we don't just get the current version
    as_released.setProperty("generation","0");
    as_released.setPropertyAttribute("generation","condition","ne");
    
    // get only the item with the greatest generation
    as_released.setAttribute("orderBy","generation DESC");
    as_released.setAttribute("pagesize","1");
    as_released.setAttribute("page","1");
    
    as_released = as_released.apply();
    
    return as_released;
}

public static Item GetPlanned(Innovator inn, string selected_date, string item_number, string as_released_gen, string as_released_rev)
{
    string part_select = "id,config_id,item_number,generation,major_rev,classification,effective_date,release_date,release_date_plan,is_released"; 
    
    Item as_planned = inn.newItem("Part","get");
    as_planned.setAttribute("select",part_select);
    as_planned.setAttribute("orderBy","generation DESC");
    as_planned.setProperty("item_number",item_number);
    
    // set date properties for query
    Item or_dates = as_planned.newOR();
    or_dates.setProperty("effective_date",selected_date);
    or_dates.setPropertyAttribute("effective_date","condition","ge");
    or_dates.setProperty("release_date",selected_date);
    or_dates.setPropertyAttribute("release_date","condition","ge");
    or_dates.setProperty("release_date_plan",selected_date);
    or_dates.setPropertyAttribute("release_date_plan","condition","ge");
    
    // make sure we get generations greater than the as_released_gen
    as_planned.setProperty("generation",as_released_gen);
    as_planned.setPropertyAttribute("generation","condition","gt");
    
    // we will limit results to the next greatest major rev
    var next_rev = NextRev(as_released_rev);
    as_planned.setProperty("major_rev",next_rev);
    
    as_planned = as_planned.apply();
    
    // return first item in collection - it will be the latest generation for the target revision
    if (as_planned.getItemCount() > 1)
        return as_planned.getItemByIndex(0);
    
    return as_planned;
}

public static string NextRev(string letter)
{
    // only works for default revisioning sequence
    // first case - string is empty: return "A"
    if ((letter == null) || (letter.Length == 0))
        return "A";
	
	// next case - last char is less than 'z': simply increment last char
    char lastChar = letter[letter.Length - 1];
    string fragment = letter.Substring(0, letter.Length - 1);

    if (lastChar < 'Z')
    {
        ++lastChar;
        return fragment + lastChar;
    }

    // next case - last char is 'Z': roll over and increment preceding string
    return NextRev(fragment) + 'A';
}

public static Item GetRelationships(Innovator inn, string item_id, string selected_date)
{
    string part_select = "classification,cn,effective_date,id,major_rev,model_id,name,release_date,release_date_plan,serial_number,item_number";
    string doc_select = "classification,cn,effective_date,id,major_rev,mcr_id,name,release_date,release_date_plan,section,service_bulletin_id,item_number";
    string cad_select = "classification,cn,effective_date,id,major_rev,name,release_date,release_date_plan,item_number";
    string dw_select = "affected_part,effective_from,effective_to,id,major_rev,release_date,release_date_plan";
    string rel_select = "id,source_id,sort_order,related_id";
    
    // get Part and relationships
    Item part = inn.newItem("Part","get");
    part.setAttribute("select",part_select);
    part.setID(item_id);
    
    Item part_docs = part.createRelationship("Part Document","get");
    part_docs.setAttribute("select",rel_select + "(" + doc_select + ")");
    part_docs.setAttribute("orderBy","sort_order");
    
    Item part_cads = part.createRelationship("Part CAD","get");
    part_cads.setAttribute("select",rel_select + "(" + cad_select + ")");
    part_cads.setAttribute("orderBy","sort_order");
    
    Item part_boms = part.createRelationship("Part BOM","get");
    part_boms.setAttribute("select",rel_select + "(" + part_select + "),quantity");
    part_boms.setAttribute("orderBy","sort_order");
    
    Item part_alts = part.createRelationship("Part Alternate","get");
    part_alts.setAttribute("select",rel_select + "(" + part_select + "),quantity");
    part_alts.setAttribute("orderBy","sort_order");
    
    part = part.apply();
    
    // get deviations
    Item devs = inn.newItem("PE_Deviation","get");
    devs.setAttribute("select",dw_select);
    devs.setProperty("affected_part",item_id);
    devs.setProperty("effective_to",selected_date);
    devs.setPropertyCondition("effective_to","ge");
    devs = devs.apply();
    
    // get waivers
    Item waivs = inn.newItem("PE_Waiver","get");
    waivs.setAttribute("select",dw_select);
    waivs.setProperty("affected_part",item_id);
    waivs.setProperty("effective_to",selected_date);
    waivs.setPropertyCondition("effective_to","ge");
    waivs = waivs.apply();
    
    // if part has deviations and/or waivers, add them to the relationships
    if (!devs.isError())
    {
        for (int i=0; i < devs.getItemCount(); i++)
        {
            Item dev = devs.getItemByIndex(i);
            DateTime selected = DateTime.Parse(selected_date);
            DateTime dev_from = DateTime.Parse(dev.getProperty("effective_from",""));
            DateTime dev_to = DateTime.Parse(dev.getProperty("effective_to",""));
            
            if (selected < dev_from)
                dev.setAttribute("date_check","before");
                
            if (selected >= dev_from && selected <= dev_to)
                dev.setAttribute("date_check","in");
                
            Item rel = part.createRelationship("Part Deviation","get");
            rel.setRelatedItem(dev);
        }
    }
    
    if (!waivs.isError())
    {
        for (int i=0; i < waivs.getItemCount(); i++)
        {
            Item waiv = waivs.getItemByIndex(i);
            DateTime selected = DateTime.Parse(selected_date);
            DateTime waiv_from = DateTime.Parse(waiv.getProperty("effective_from",""));
            DateTime waiv_to = DateTime.Parse(waiv.getProperty("effective_to",""));
            
            if (selected < waiv_from)
                waiv.setAttribute("date_check","before");
                
            if (selected >= waiv_from && selected <= waiv_to)
                waiv.setAttribute("date_check","in");
                
            Item rel = part.createRelationship("Part Waiver","get");
            rel.setRelatedItem(waiv);
        }
    }
    
    return part;
}

public static void SetHierarchy(Item thisItem, int level)
{
    try {
        // get relationships
        Item rels = thisItem.getRelationships();
    
        // for each related item, set hierarchy
        for (int i=0; i < rels.getItemCount(); i++)
        {
            Item related = rels.getItemByIndex(i).getItemsByXPath("./Relationships/Item");
            SetHierarchy(related, level+1);
        }
        
        thisItem.setProperty("hierarchy",level + "");
    }
    catch (Exception e)
    {
        thisItem.setProperty("hierarchy",level + "");
    }
}

public static Item GetParent(Innovator inn, string item_id)
{
    Item parent = inn.newItem("Part","get");
    parent.setProperty("classification","Application Requirements");
    
    Item bom = parent.createRelationship("Part BOM","get");
    bom.setProperty("related_id",item_id);
    
    parent.createRelationship("Part Document","get");
    parent.createRelationship("Part CAD","get");
    
    parent = parent.apply();
    
    return parent;
}

public static Item BuildResult(Innovator inn, string selected_date, string item_number, Item structure)
{
    Item result = inn.newItem("Report Options");
    result.setProperty("item_number",item_number);
    result.setProperty("selected_date",selected_date);
    
    result.appendItem(structure);
        
    return result;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
]]></method_code>
  <method_type>C#</method_type>
  <name>Get CM2 Report Data</name>
 </Item>
</AML>