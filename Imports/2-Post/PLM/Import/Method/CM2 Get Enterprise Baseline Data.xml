<AML>
 <Item type="Method" id="09CE700DE3904A45B29439FFDCCD9444" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[    var inn = this.getInnovator();
    var selected_date = this.getProperty("selected_date","");
    var item_number = this.getProperty("item_number","");

    if (selected_date == "" || item_number == "")
        return inn.newError("The 'selected_date' and 'item_number' properties cannot be null.");
    
    Item result = GetStructure(inn, selected_date, item_number, 0);
    
    result = BuildResult(inn, selected_date, item_number, result);

    return result;
}

public static Item GetStructure(Innovator inn, string selected_date, string item_number, int level)
{
    
    
    /**** get the as-released item - calculation step 1 ***********************/
    
    Item as_released = GetReleased(inn, selected_date, item_number, "Part");
    
    // we'll use this in the XSLT for the report
    as_released.setAttribute("cm2","as-released");
    
        
    /**** get the as-planned item(s) - calculation step 2 *********************/
    
    // get the generation of the as-released part
    string as_released_gen;
    string as_released_rev;
    if (as_released.isError())
    {
        // no released part matches this criteria
        as_released = null;
        as_released_gen = "0";
        as_released_rev = "";
    } 
    else
    {
        as_released_gen = as_released.getProperty("generation","");
        as_released_rev = as_released.getProperty("major_rev","");
    }
    
    Item as_planned = GetPlanned(inn, selected_date, item_number, as_released_gen, as_released_rev, "Part");
    

    /**** get the relationships for the as-planned and as-released items ******/
    
    Item released_structure = as_released;
    Item rel_children = released_structure.getRelationships("Part Document");
    
    if (rel_children.isError())
        return released_structure;
   
    // get the structure of each related document
    for (int i=0; i < rel_children.getItemCount(); i++)
    {
        Item this_rel = rel_children.getItemByIndex(i);
        Item child = this_rel.getRelatedItem();
        
        Item this_child = GetDocumentStructure(inn, selected_date, child.getProperty("item_number",""), level);
        
        // if successful, we remove the related item and replace with this_part
        if (!this_child.isError())
            this_rel.setRelatedItem(this_child);
    }
    
    SetHierarchy(released_structure,level);
    
    if (as_planned.isError())
        return released_structure;
        
    Item planned_structure = as_planned;
    if (as_planned.getItemCount() > 1)
        planned_structure = as_planned.getItemByIndex(0);

    Item plan_children = planned_structure.getRelationships("Part Document");
    if (plan_children.isError())
    {
        // all released children are deletes
        return released_structure;
    }
    
    // get the structure of each related document
    for (int i=0; i < plan_children.getItemCount(); i++)
    {
        Item this_rel = plan_children.getItemByIndex(i);
        Item child = this_rel.getRelatedItem();
        
        Item this_child = GetDocumentStructure(inn, selected_date, child.getProperty("item_number",""), level);
        
        // if successful, we remove the related item and replace with this_part
        if (!this_child.isError())
            this_rel.setRelatedItem(this_child);
    }
        
    SetHierarchy(planned_structure,level);
    
    int planned_revisions = planned_structure.getItemCount();
    string planned_id = planned_structure.getID(); // id of latest generation
    
    // for each child document in the released structure, see if there is a corresponding bom 
    // in the planned structure with the same item number
    rel_children = released_structure.getItemsByXPath("./Relationships/Item[@type='Part Document']");
    plan_children = planned_structure.getItemsByXPath("./Relationships/Item[@type='Part Document' and source_id='" + planned_id + "']");
    
    if (rel_children.isEmpty() || plan_children.isEmpty())
        return released_structure;
    
    // check released relationships
    for (int i=0; i < rel_children.getItemCount(); i++)
    {
        Item rel_child = rel_children.getItemByIndex(i);
        Item rel_doc = rel_child.getRelatedItem();

        Item plan_child = plan_children.getItemsByXPath("//Item[source_id='" + planned_id + "' and related_id/Item/item_number='" + rel_doc.getProperty("item_number","") + "' and related_id/Item/major_rev='" + rel_doc.getProperty("major_rev","") + "']");
        
        // if plan_child is defined, this relationship is unchanged
        // if the plan_child is undefined, we know rel_child is deleted
        if (plan_child.getItemCount() != 1)
        {
            rel_child.setProperty("a_d","D");
            rel_child.setAttribute("is_planned","true");
            
            // see if a planned item exists with a different rev, then use that to set the planned_effective_date and planned_cn
            Item added = plan_children.getItemsByXPath("//Item[source_id='" + planned_id + "' and related_id/Item/item_number='" + rel_doc.getProperty("item_number","") + "']/related_id/Item");
            
            if (added.getItemCount() == 1)
            {
                rel_child.setProperty("planned_effective_date",added.getProperty("effective_date",""));
                
                Item added_cn = added.getPropertyItem("cn");
                if (added_cn != null)
                    rel_child.setProperty("planned_cn",added_cn.getProperty("keyed_name",""));
            }
            else
            {
                Item first_parent = GetFirstParent(inn, rel_doc.getProperty("item_number",""), item_number, "delete", "Part");
                if (first_parent != null)
                {
                    rel_child.setProperty("planned_effective_date",first_parent.getProperty("effective_date",""));
                    
                    Item parent_cn = first_parent.getPropertyItem("cn");
                    if (parent_cn != null)
                        rel_child.setProperty("planned_cn",parent_cn.getProperty("keyed_name",""));
                }
                else 
                {
                    rel_child.setProperty("planned_effective_date",released_structure.getProperty("effective_date",""));
                    
                    Item parent_cn = released_structure.getPropertyItem("cn");
                    if (parent_cn != null)
                        rel_child.setProperty("planned_cn",parent_cn.getProperty("keyed_name",""));
                }
            }
        }
    }
    
    // check planned relationships to see if there are any that are added
    for (int i=0; i < plan_children.getItemCount(); i++)
    { 
        Item plan_child = plan_children.getItemByIndex(i);
        Item plan_doc = plan_child.getRelatedItem();
        
        Item rel_child = rel_children.getItemsByXPath("//Item[source_id='" + released_structure.getID() + "' and related_id/Item/item_number='" + plan_doc.getProperty("item_number","") + "' and related_id/Item/major_rev='" + plan_doc.getProperty("major_rev","") + "']");
        
        // if rel_child is defined, this relationship is unchanged
        // if the rel_child is undefined, we know plan_child is added so we need to add it to the structure
        if (rel_child.getItemCount() != 1)
        {
            plan_child.setProperty("a_d","A");
            plan_child.setAttribute("is_planned","true");

            plan_child.setProperty("planned_effective_date",plan_doc.getProperty("effective_date",""));
            
            Item cn = plan_doc.getPropertyItem("cn");
            
            if (cn != null)
                plan_child.setProperty("planned_cn",cn.getProperty("keyed_name","no name"));
            
            released_structure.addRelationship(plan_child);
        }
    }
    
    
    /**** return the results to be processed by xslt **************************/
    return released_structure;

}

public static Item GetDocumentStructure(Innovator inn, string selected_date, string item_number, int level)
{
    /**** get the as-released item - calculation step 1 ***********************/
    
    Item as_released = GetReleased(inn, selected_date, item_number, "Document");
    
    // we'll use this in the XSLT for the report
    as_released.setAttribute("cm2","as-released");
        
        
    /**** get the as-planned item(s) - calculation step 2 *********************/
    
    // get the generation of the as-released part
    string as_released_gen;
    string as_released_rev;
    if (as_released.isError())
    {
        // no released part matches this criteria
        as_released = null;
        as_released_gen = "0";
        as_released_rev = "";
    } 
    else
    {
        as_released_gen = as_released.getProperty("generation","");
        as_released_rev = as_released.getProperty("major_rev","");
    }
    
    Item as_planned = GetPlanned(inn, selected_date, item_number, as_released_gen, as_released_rev, "Document");
    
    
    /**** get the relationships for the as-planned and as-released items ******/
    
    Item released_structure = as_released;
    Item rel_children = GetRelationships(inn, as_released.getID());
    
    if (rel_children.isError())
        return released_structure;
   
    // add children to released structure
    for (int i=0; i < rel_children.getItemCount(); i++)
        released_structure.addRelationship(rel_children.getItemByIndex(i));
    
    SetHierarchy(released_structure,level);
    
    if (as_planned.isError())
        return released_structure;
        
    Item planned_structure = as_planned;
    if (as_planned.getItemCount() > 1)
        planned_structure = as_planned.getItemByIndex(0);

    Item plan_children = GetRelationships(inn,as_planned.getID());
    if (plan_children.isError())
    {
        // all released children are deletes
        rel_children = released_structure.getRelationships("Document Child Document");
        return released_structure;
    }
    
    // add children to planned structure
    for (int i=0; i < plan_children.getItemCount(); i++)
        planned_structure.addRelationship(plan_children.getItemByIndex(i));
        
    SetHierarchy(planned_structure,level);
    
    int planned_revisions = planned_structure.getItemCount();
    string planned_id = planned_structure.getID(); // id of latest generation
    
    // for each child document in the released structure, see if there is a corresponding bom 
    // in the planned structure with the same item number
    rel_children = released_structure.getItemsByXPath("./Relationships/Item[@type='Document Child Document']");
    plan_children = planned_structure.getItemsByXPath("./Relationships/Item[@type='Document Child Document' and source_id='" + planned_id + "']");
    
    if (rel_children.isEmpty() || plan_children.isEmpty())
        return released_structure;
    
    // check released relationships
    for (int i=0; i < rel_children.getItemCount(); i++)
    {
        Item rel_child = rel_children.getItemByIndex(i);
        Item rel_doc = rel_child.getRelatedItem();
        
        Item plan_child = plan_children.getItemsByXPath("//Item[source_id='" + planned_id + "' and related_id/Item/item_number='" + rel_doc.getProperty("item_number","") + "' and related_id/Item/major_rev='" + rel_doc.getProperty("major_rev","") + "']");
        
        // if plan_child is defined, this relationship is unchanged
        // if the plan_child is undefined, we know rel_child is deleted
        if (plan_child.getItemCount() != 1)
        {
            rel_child.setProperty("a_d","D");
            rel_child.setAttribute("is_planned","true");
            
            // see if a planned item exists with a different rev, then use that to set the planned_effective_date and planned_cn
            Item added = plan_children.getItemsByXPath("//Item[source_id='" + planned_id + "' and related_id/Item/item_number='" + rel_doc.getProperty("item_number","") + "']/related_id/Item");
            
            if (added.getItemCount() == 1)
            {
                rel_child.setProperty("planned_effective_date",added.getProperty("effective_date",""));
                
                Item added_cn = added.getPropertyItem("cn");
                if (added_cn != null)
                    rel_child.setProperty("planned_cn",added_cn.getProperty("keyed_name",""));
            }
            else
            {
                Item first_parent = GetFirstParent(inn, rel_doc.getProperty("item_number",""), item_number, "delete", "Document");
                if (first_parent != null)
                {
                    rel_child.setProperty("planned_effective_date",first_parent.getProperty("effective_date",""));
                    
                    Item parent_cn = first_parent.getPropertyItem("cn");
                    if (parent_cn != null)
                        rel_child.setProperty("planned_cn",parent_cn.getProperty("keyed_name",""));
                }
                else 
                {
                    rel_child.setProperty("planned_effective_date",released_structure.getProperty("effective_date",""));
                    
                    Item parent_cn = released_structure.getPropertyItem("cn");
                    if (parent_cn != null)
                        rel_child.setProperty("planned_cn",parent_cn.getProperty("keyed_name",""));
                }
            }
        }
    }
    
    // check planned relationships to see if there are any that are added
    for (int i=0; i < plan_children.getItemCount(); i++)
    {
        Item plan_child = plan_children.getItemByIndex(i);
        Item plan_doc = plan_child.getRelatedItem();
        
        Item rel_child = rel_children.getItemsByXPath("//Item[source_id='" + released_structure.getID() + "' and related_id/Item/item_number='" + plan_doc.getProperty("item_number","") + "' and related_id/Item/major_rev='" + plan_doc.getProperty("major_rev","") + "']");
        
        // if rel_child is defined, this relationship is unchanged
        // if the rel_child is undefined, we know plan_child is added so we need to add it to the structure
        if (rel_child.getItemCount() != 1)
        {
            plan_child.setProperty("a_d","A");
            plan_child.setAttribute("is_planned","true");
            plan_child.setProperty("planned_effective_date",plan_doc.getProperty("effective_date",""));
            
            Item cn = plan_doc.getPropertyItem("cn");
            
            if (cn != null)
                plan_child.setProperty("planned_cn",cn.getProperty("keyed_name","no name"));
            
            released_structure.addRelationship(plan_child);
        }
    }
    
    // get structure of each related child that isn't added or deleted
    Item recurse_children = released_structure.getItemsByXPath("./Relationships/Item[@type='Document Child Document' and not(a_d='D')]");
    for(int i=0; i < recurse_children.getItemCount(); i++)
    {
        Item relationship = recurse_children.getItemByIndex(0);
        Item related = relationship.getRelatedItem();
        Item structure = GetDocumentStructure(inn, selected_date, related.getProperty("item_number",""), level+1);
        
        if (!structure.isError())
            relationship.setRelatedItem(structure);
    }

    
    /**** return the results to be processed by xslt **************************/
    return released_structure;
}

public static Item GetReleased(Innovator inn, string selected_date, string item_number, string itemtype)
{
    string part_select = "id,config_id,item_number,generation,classification,effective_date,release_date,release_date_plan,is_released,major_rev"; 
    string doc_select = "id,config_id,item_number,generation,classification,effective_date,release_date,release_date_plan,is_released,major_rev,name"; 
    
    Item as_released = inn.newItem(itemtype,"get");
    
    if (itemtype == "Part")
        as_released.setAttribute("select",part_select);
        
    if (itemtype == "Document")
        as_released.setAttribute("select",doc_select);
    
    // set properties for query
    as_released.setProperty("is_released","1");
    as_released.setProperty("effective_date",selected_date);
    as_released.setPropertyAttribute("effective_date","condition","le");
    as_released.setProperty("item_number",item_number);
    
    // make sure we don't just get the current version
    as_released.setProperty("generation","0");
    as_released.setPropertyAttribute("generation","condition","ne");
    
    // get only the item with the greatest generation
    as_released.setAttribute("orderBy","generation DESC");
    as_released.setAttribute("pagesize","1");
    as_released.setAttribute("page","1");
    
    if (itemtype == "Part")
        as_released.createRelationship("Part Document","get");
    
    as_released = as_released.apply();
    
    // if there's no released version, use the latest generation that fits the date criteria
    if (as_released.isError())
    {
        as_released = inn.newItem(itemtype,"get");
    
        if (itemtype == "Part")
            as_released.setAttribute("select",part_select);
            
        if (itemtype == "Document")
            as_released.setAttribute("select",doc_select);
        
        // set properties for query
        as_released.setProperty("effective_date",selected_date);
        as_released.setPropertyAttribute("effective_date","condition","le");
        as_released.setProperty("item_number",item_number);
        
        // make sure we don't just get the current version
        as_released.setProperty("generation","0");
        as_released.setPropertyAttribute("generation","condition","ne");
        
        // get only the item with the greatest generation
        as_released.setAttribute("orderBy","generation DESC");
        as_released.setAttribute("pagesize","1");
        as_released.setAttribute("page","1");
        
        if (itemtype == "Part")
            as_released.createRelationship("Part Document","get");
        
        as_released = as_released.apply();                      
    }
    
    return as_released;
}

public static Item GetPlanned(Innovator inn, string selected_date, string item_number, string as_released_gen, string as_released_rev, string itemtype)
{
    string part_select = "id,config_id,item_number,generation,major_rev,classification,effective_date,release_date,release_date_plan,is_released"; 
    string doc_select = "id,config_id,item_number,generation,classification,effective_date,release_date,release_date_plan,is_released,major_rev,name"; 
        
    Item as_planned = inn.newItem(itemtype,"get");
    
    if (itemtype == "Part")
        as_planned.setAttribute("select",part_select);
        
    if (itemtype == "Document")
        as_planned.setAttribute("select",doc_select);
    
    // set properties for query
    as_planned.setAttribute("orderBy","generation DESC");
    as_planned.setProperty("item_number",item_number);
    
    // set date properties for query
    Item or_dates = as_planned.newOR();
    or_dates.setProperty("effective_date",selected_date);
    or_dates.setPropertyAttribute("effective_date","condition","ge");
    or_dates.setProperty("release_date",selected_date);
    or_dates.setPropertyAttribute("release_date","condition","ge");
    or_dates.setProperty("release_date_plan",selected_date);
    or_dates.setPropertyAttribute("release_date_plan","condition","ge");
    
    // make sure we get generations greater than the as_released_gen
    as_planned.setProperty("generation",as_released_gen);
    as_planned.setPropertyAttribute("generation","condition","gt");
    
    if (itemtype == "Part")
        as_planned.createRelationship("Part Document","get");
        
    as_planned = as_planned.apply();
    
    // return first item in collection - it will be the latest generation for the target revision
    if (as_planned.getItemCount() > 1)
        return as_planned.getItemByIndex(0);
    
    return as_planned;
}

public static string NextRev(string letter)
{
    // only works for default revisioning sequence
    
    // first case - string is empty: return "A"
    if ((letter == null) || (letter.Length == 0))
        return "A";
	
	// next case - last char is less than 'z': simply increment last char
    char lastChar = letter[letter.Length - 1];
    string fragment = letter.Substring(0, letter.Length - 1);

    if (lastChar < 'Z')
    {
        ++lastChar;
        return fragment + lastChar;
    }

    // next case - last char is 'Z': roll over and increment preceding string
    return NextRev(fragment) + 'A';
}

public static Item GetRelationships(Innovator inn, string item_id)
{
    Item docs = inn.newItem("Document Child Document","get");
    docs.setProperty("source_id",item_id);
    docs = docs.apply();
    
    return docs;
}

public static void SetHierarchy(Item thisItem, int level)
{
    try {
        // get relationships
        Item rels = thisItem.getRelationships();
    
        // for each related item, set hierarchy
        for (int i=0; i < rels.getItemCount(); i++)
        {
            Item related = rels.getItemByIndex(i).getItemsByXPath("./related_id/Item");
            SetHierarchy(related, level+1);
        }
        
        thisItem.setProperty("hierarchy",level + "");
    }
    catch (Exception e)
    {
        thisItem.setProperty("hierarchy",level + "");
    }
}

// this method returns the first generation that includes an added part, or the first generation that does not include a deleted part
public static Item GetFirstParent(Innovator inn, string child_num, string parent_num, string change_type, string itemtype)
{
    Item parent = inn.newItem(itemtype,"get");
    parent.setAttribute("orderBy","generation ASC");
    parent.setProperty("item_number",parent_num);
    parent.setProperty("generation","0");
    parent.setPropertyAttribute("generation","condition","ge");
    
    string rel_type = "";
    if (itemtype == "Part")
        rel_type = "Part Document";
        
    if (itemtype == "Document")
        rel_type = "Document Child Document";
        
    Item rel = parent.createRelationship(rel_type,"get");

    Item child = rel.createRelatedItem("Document","get");
    child.setProperty("item_number",child_num);
    
    parent = parent.apply();
    
    // get the first generation of the parent that includes the child part
    if (change_type == "add")
    {
        return parent.getItemByIndex(0);
    }
    
    // get the last parent to have the part
    if (change_type == "delete")
    {
        return parent.getItemByIndex(parent.getItemCount()-1);
    }
    
    return inn.newError("GetFirstParent: bad parameter");
}

public static Item BuildResult(Innovator inn, string selected_date, string item_number, Item structure)
{
    Item result = inn.newItem("Report Options");
    result.setProperty("item_number",item_number);
    result.setProperty("selected_date",selected_date);
    
    result.appendItem(structure);
        
    return result;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
]]></method_code>
  <method_type>C#</method_type>
  <name>CM2 Get Enterprise Baseline Data</name>
 </Item>
</AML>